------------------------------------------------------------------------------------------------------------------------------
DYNAMODB DYNAMODBB

AWS console:
https://aws.amazon.com/pt/console/

Cloud9 console:
https://console.aws.amazon.com/cloud9/

Link curso Coursera:
https://www.coursera.org/learn/dynamodb-nosql-database-driven-apps?

COMANDOS AWS CLI
Comandos do terminal(executar usando terminal do Cloud9):
---------------
- ############### DOC:

https://docs.aws.amazon.com/pt_br/amazondynamodb/latest/developerguide/Tools.CLI.html

- ############### LISTAR TABELAS:

aws dynamodb list-tables

- ############### IMPORTAR DADOS PARA TABELA:

aws dynamodb put-item --table-name Music --item file://song1.json
aws dynamodb put-item --table-name Music --item file://song2.json
aws dynamodb put-item --table-name Music --item file://song3.json

song1.json:
{
    "Artist": {"S": "David Bowie"},
    "SongTitle": {"S": "Changes"},
    "AlbumTitle": {"S": "Hunky Dory"},
    "Genre": {"S": "Rock"}
}

song2.json:
{
    "Artist": {"S": "David Bowie"},
    "SongTitle": {"S": "Heroes"},
    "AlbumTitle": {"S": "Heroes"}
}

song3.json:
{
    "Artist": {"S": "Bryan Adams"},
    "SongTitle": {"S": "Cloud Number Nine"},
    "AlbumTitle": {"S": "On A Day Like Today"},
    "Released": {"S": "1998"}
}

doc: https://docs.aws.amazon.com/cli/latest/reference/dynamodb/put-item.html

- ############### FAZER CONSULTA NO BD:

(pela partition-key, que é chave primária)
aws dynamodb query --table-name Music --key-condition-expression "Artist = :v1" --expression-attribute-values file://values1.json
(pela partition-key e sort-key)
aws dynamodb query --table-name Music --key-condition-expression "Artist = :v1 AND SongTitle = :v2" --expression-attribute-values file://values2.json

values1.json:
{
	":v1": {"S": "David Bowie"}
}

values2.json:
{
	":v1": {"S": "David Bowie"},
	":v2": {"S": "Heroes"}
}

- ############### DELETAR DO BANCO

aws dynamodb delete-item --table-name Music --key file://keysToDelete.json

keysToDelete.json:
{
	"Artist": {"S": "David Bowie"},
	"SongTitle": {"S": "Changes"}
}

- ############### FAZER SCAN (TIPO UM SELECT * QUE TRAZ TUDO)

aws dynamodb scan --table-name Music

- ############### LIMITAR NÚMERO DE ITEMS RETORNADOS NO SCAN

aws dynamodb scan --table-name Music --max-items 3

- ############### FILTER RESULT (FILTER EXPRESSIONS)

aws dynamodb query --table-name Music --key-condition-expression "Artist = :v1" --filter-expression "Released = :v2" --expression-attribute-values file://filterValues1.json
aws dynamodb scan --table-name Music --filter-expression "Released = :v1" --expression-attribute-values file://filterValues1.1.json
aws dynamodb scan --table-name Music --filter-expression "SongTitle = :v1" --expression-attribute-values file://filterValues2.json

filterValues1.json:
{
	":v1": {"S": "Bryan Adams"},
	":v2": {"S": "1998"}
}

filterValues1.1.json:
{
	":v1": {"S": "1998"}
}

filterValues2.json:
{
	":v1": {"S": "Heroes"}
}

OBS: We can use filters with scans in a similar fashion. Keep in mind though, when we're working with scans, they will go through every item in the table 
and apply the filter after the scan has completed. So, a filter will not help you make scans less expensive or more efficient.

- ############### SECONDARY INDEX

A secondary index essentially allows you to create a copy of your table with an alternate key schema, 
making other attributes suddenly queryable. You can do this easily by calling an API to create the secondary index for you, 
and this index is kept in sync with the base table asynchronously.
We can then run queries against that index using the newly defined partition and sort keys. 
There are two types of indexes we will go over in depth. The first is called a local secondary index. 
This allows you to pick an alternate sort key. The second is called a global secondary index, 
and this allows you to create an alternate partition and sort key.

- ############### CRIAR BACKUP(ON-DEMAND BACKUP) DE UMA TABELA E RESTAURA-LO

aws dynamodb create-backup --table-name Music --backup-name MusicBackup
aws dynamodb describe-backup --backup-arn arn:aws:dynamodb:us-east-2:848577315427:table/Music/backup/01612988844270-f84c6d96
aws dynamodb restore-table-from-backup --target-table-name MusicRestored --backup-arn arn:aws:dynamodb:us-east-2:848577315427:table/Music/backup/01612988844270-f84c6d96
aws dynamodb describe-table --table-name MusicRestored
aws dynamodb scan --table-name MusicRestored

- ############### BATCH WRITE ITEM

aws dynamodb batch-write-item --request-items file://batchJSON/inputWrite.json
Funcionou somente da forma abaixo com outra estrutura de json:
aws dynamodb batch-write-item --request-items file://batchJSON/inputWrite.json

batchJSON/inputWrite.json:
{
	"Music": [
		{
			"PutRequest": {
				"Item": {
					"Artist": {"S": "Steely Dan"},
					"SongTitle": {"S": "Do It Again"},
					"AlbumTitle": {"S": "Can't Buy a Thrill"},
					"Released": {"N": "1972"}
				},
				"Item": {
					"Artist": {"S": "Steely Dan"},
					"SongTitle": {"S": "Dirty Work"},
					"AlbumTitle": {"S": "Can't Buy a Thrill"},
					"Released": {"N": "1972"},
					"Note": {"S": "Great Song!"}
				},
				"Item": {
					"Artist": {"S": "Steely Dan"},
					"SongTitle": {"S": "Turn That Heartbeat Over Again"},
					"AlbumTitle": {"S": "Can't Buy a Thrill"},
					"Released": {"N": "1972"}
				}
			}
		}
	]
}

batchJSON/inputWrite_2.json:
{
	"Music": [
		{
			"PutRequest": {
				"Item": {
					"Artist": {"S": "Steely Dan"},
					"SongTitle": {"S": "Do It Again"},
					"AlbumTitle": {"S": "Can't Buy a Thrill"},
					"Released": {"N": "1972"}
				}
			}
		},
		{
			"PutRequest": {
				"Item": {
					"Artist": {"S": "Steely Dan"},
					"SongTitle": {"S": "Dirty Work"},
					"AlbumTitle": {"S": "Can't Buy a Thrill"},
					"Released": {"N": "1972"},
					"Note": {"S": "Great Song!"}
				}
			}
		},
		{
			"PutRequest": {
				"Item": {
					"Artist": {"S": "Steely Dan"},
					"SongTitle": {"S": "Turn That Heartbeat Over Again"},
					"AlbumTitle": {"S": "Can't Buy a Thrill"},
					"Released": {"N": "1972"}
				}
			}
		}
	]
}

DOC: https://docs.aws.amazon.com/pt_br/amazondynamodb/latest/developerguide/SampleData.LoadData.html

- ############### BATCH GET ITEM

aws dynamodb batch-get-item --request-items file://batchJSON/inputGet.json

batchJSON/inputGet.json
{
	"Music": {
		"Keys": [
			{
				"Artist": {"S": "Bryan Adams"},
				"SongTitle": {"S": "Teste1"}
			},
			{
				"Artist": {"S": "Steely Dan"},
				"SongTitle": {"S": "Do It Again"}
			}
		]
	}
}

DOC: https://docs.aws.amazon.com/cli/latest/reference/dynamodb/batch-get-item.html

- ############### DELETE TABLE

aws dynamodb delete-table --table-name dragons

- ############### GET SOME HELP(SEE DOC)

aws help
aws <command> help
aws <command> <subcommand> help

Examples:
aws dynamodb help
aws dynamodb scan help

############# EXERCISE 8 ###############

!!! All these commands(present in the exercise pdf) don't work !!!
aws dynamodb scan --index-name dragon_stats_index --table-name single_dragon_tables --filter family = "green"
aws dynamodb scan --index-name dragon_stats_index --table-name single_dragon_tables --filter location_state = "arizona"
aws dynamodb query --index-name location_index --table-name single_dragon_tables --keycondition location = starts_with("usa#arizona")
aws dynamodb query --index-name location_index --table-name single_dragon_tables --keycondition location = starts_with("usa#nevada#las vegas#spring valley")

- ############### TESTES

QUERY INDEX USING KEY-CONDITIONS

aws dynamodb query --index-name location_index --table-name improved_single_dragon_table --key-conditions '{
    "sk":{
	    "ComparisonOperator":"EQ",
	    "AttributeValueList": [ {"S": "stats"} ]
    }
}'

The same above, but in one-line style:
aws dynamodb query --index-name location_index --table-name improved_single_dragon_table --key-conditions '{"sk":{"ComparisonOperator":"EQ","AttributeValueList": [ {"S": "stats"} ]}}'

---
		
EQUIVALENT TO QUERY 2 BUT USING AWS CLI INSTEAD OF AWS SDK 

aws dynamodb scan \
    --table-name improved_single_dragon_table \
	--index-name dragon_stats_index \
	--expression-attribute-values '{
        ":family": {"S": "green"}
    }' \
	--expression-attribute-names '{"#family": "family"}' \
	--filter-expression '#family = :family' \
	--projection-expression "dragon_name"

---

EQUIVALENT TO QUERY 4 BUT USING AWS CLI INSTEAD OF AWS SDK 
 
aws dynamodb query \
    --table-name improved_single_dragon_table \
	--index-name location_index \
	--expression-attribute-values '{
        ":location": {"S": "usa#arizona"}, 
        ":stats": {"S": "stats"}
    }' \
	--expression-attribute-names '{"#location": "location"}' \
	--key-condition-expression 'sk = :stats and begins_with(#location, :location)'
---------------

AWS SDK (AWS SDK for JavaScript)
---------------
- INSTALAR AWS-SDK
npm install aws-sdk

- RODAR O SCRIPT PARA CRIAÇÃO DE TABELA
node create_table.js
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab1/solution/create_table.js
Doc: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#createTable-property

- INSERT NA TABELA
node upload_items.js
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab2/solution/upload_items.js
Doc: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#putItem-property

- UPLOAD SITE PARA O BUCKET DO S3
pushd /home/ec2-user/environment/lab2/resources && node upload_website.js && popd
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab2/resources/upload_website.js

- SCAN TABLE
node scan_dragons.js test
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab2/solution/scan_dragons.js
Doc: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#scan-property

- UPLOAD CONFIG PARA O BUCKET DO S3
pushd /home/ec2-user/environment/lab2/resources && node upload_config.js && popd
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab2/resources/upload_config.js

EXERCISE 3

- CREATE MULTIPLE TABLES
node create_multiple_tables.js
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab3/solution/create_multiple_tables.js

- POPULATE TABLES
node seed_dragons.js
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab3/solution/seed_dragons.js

- SCAN TABLE (DRAGONS)
node scan_dragons.js test
node scan_dragons.js test "Cassidiuma"
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab3/solution/scan_dragons.js
Doc: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#scan-property

EXERCISE 8

- CREATE A SIMPLE SINGLE TABLE
node create_single_table_and_index.js
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab8/solution/create_single_table_and_index.js

- POPULATE THE SIMPLE SINGLE TABLE
node seed_single_table.js
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab8/solution/seed_single_table.js

- CREATE A COMPLEX SINGLE TABLE
node create_improved_single_table_and_all_indexes.js
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab8/solution/create_improved_single_table_and_all_indexes.js

- POPULATE THE COMPLEX SINGLE TABLE
node seed_improved_table.js
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab8/solution/seed_improved_table.js

- QUERY THE COMPLEX SINGLE TABLE
node query_1.js test "spews acid"
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab8/solution/query_1.js

- QUERY THE COMPLEX SINGLE TABLE
node query_2.js test "green"
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab8/solution/query_2.js

- QUERY THE COMPLEX SINGLE TABLE
node query_3.js test
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab8/solution/query_3.js

- QUERY THE COMPLEX SINGLE TABLE
node query_4.js test "usa#arizona"
Link do script: https://github.com/brunosantanati/coursera-dynamodb/blob/main/files/lab8/solution/query_4.js

- LINK DO SITE NO S3:
http://er-101-2021-02-10-dragon-website.s3-website.us-east-2.amazonaws.com/
http://er-101-2021-02-10-dragon-website.s3-website.us-east-2.amazonaws.com/index2.html
---------------

------------------------------------------------------------------------------------------------------------------------------